# Data

## Data Loading and Preprocessing

-   Assign descriptive column names matching the project proposal’s features.

-   Convert the target ‘CreditRisk’ to a two‐level factor (“Bad” vs “Good”), focusing on the “Bad” class as the event of interest.

-   Identify categorical columns and convert them into unordered factors with simplified level labels (L1, L2, …) to prepare for modeling

```{r chunk1,  echo=TRUE,message=FALSE, warning=FALSE, results='hide'}
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(caret)     
library(rpart)     
library(rpart.plot) 
library(DALEX)      
library(lime)       
library(ggplot2) 
# Load the German credit dataset from the UCI repository
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data"
data <- read.table(url, header = FALSE, stringsAsFactors = FALSE, strip.white = TRUE)

# Assign descriptive column names
col_names <- c(
  "Status", "Duration", "CreditHistory", "Purpose", "CreditAmount", "Savings",
  "EmploymentDuration", "InstallmentRate", "PersonalStatus", "OtherDebtors",
  "ResidenceDuration", "Property", "Age", "OtherInstallmentPlans", "Housing",
  "ExistingCreditsCount", "Job", "Dependents", "Telephone", "ForeignWorker", "CreditRisk"
)
names(data) <- col_names

# Convert CreditRisk to a factor with levels Bad (2) and Good (1)
data$CreditRisk <- factor(data$CreditRisk, 
                         levels = c(2, 1), 
                         labels = c("Bad", "Good"))  # 'Bad' is the class of interest

# Specify which columns are categorical
categorical_cols <- c(
  "Status", "CreditHistory", "Purpose", "Savings", "EmploymentDuration",
  "InstallmentRate", "PersonalStatus", "OtherDebtors", "ResidenceDuration",
  "Property", "OtherInstallmentPlans", "Housing", "ExistingCreditsCount",
  "Job", "Telephone", "ForeignWorker"
)

# Convert these columns to factors with simplified level names
data[categorical_cols] <- lapply(data[categorical_cols], function(x) {
  x <- as.factor(x)
  levels(x) <- paste0("L", seq_along(levels(x)))  # Simplify factor levels to L1, L2, …
  return(x)
})
```

### Summary data after preprocessing

```{r}
library(dplyr)
library(purrr)
library(tibble)
library(DT)

glaze_df <- tibble(
  Variable = names(data),
  Type     = map_chr(data, ~ class(.x)[1]),
  Missing  = map_int(data, ~ sum(is.na(.x))),
  Unique   = map_int(data, ~ n_distinct(.x)),
  Sample   = map_chr(data, ~ paste0(head(.x, 3), collapse = ", "))
)

DT::datatable(
  glaze_df,
  options = list(
    scrollX    = TRUE,    # horizontal scrolling
    pageLength = 10       # rows per “page”
  ),
  class = "stripe hover compact"
)
```
## Data Splitting

Split data into 70% training and 30% testing to evaluate model generalization.

-   Use stratified sampling to preserve class ratios.

-   Remove any factor columns in training with only one level to avoid zero‐variance predictors.

-   Ensure test set uses the same predictor columns as training.

```{r chunk2,  echo=TRUE,message=FALSE, warning=FALSE, results='hide'}
set.seed(2023)
train_idx <- createDataPartition(data$CreditRisk, 
                                p = 0.7, 
                                list = FALSE,
                                times = 1)
train_data <- data[train_idx, ]
test_data <- data[-train_idx, ]

# Remove factor columns that have only one level
remove_single_level <- function(df) {
  sapply(df, function(x) {
    if(is.factor(x)) {
      return(length(unique(x)) > 1)
    } else {
      return(TRUE)
    }
  })
}

valid_cols <- remove_single_level(train_data)
train_data <- train_data[, valid_cols]
test_data <- test_data[, colnames(train_data)]  # Keep feature set consistent

# Validate class distribution
cat("Training set distribution:\n")
prop.table(table(train_data$CreditRisk)) 
cat("\nTest set distribution:\n")
prop.table(table(test_data$CreditRisk))

saveRDS(train_data, "train_data.rds")
saveRDS(test_data,  "test_data.rds")
```

## Description

### Origin & File

```{r}
df_origin <- data.frame(
  File        = "german.data",
  Description = "Original dataset provided by Prof. Hofmann, containing mixed symbolic and categorical attributes for credit-risk prediction.",
  check.names     = FALSE,
  stringsAsFactors= FALSE
)
df_origin %>%
  kable(format = "html", escape = FALSE, align = c("l","l")) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("condensed","hover")) %>%
  row_spec(0, extra_css = "font-size:14pt; font-weight:bold;") %>%   # header bold 14pt
  row_spec(1, extra_css = "font-size:12pt;")

```

### Instances

```{r}
df_instances <- data.frame(
  `Total Records` = "1,000",
  Description     = "Each record is one loan applicant profile",
  check.names     = FALSE,
  stringsAsFactors= FALSE
)
df_instances %>%
  kable(format = "html", escape = FALSE, align = c("c","l")) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped","hover","condensed")) %>%
  row_spec(0, extra_css = "font-size:14pt; font-weight:bold;") %>%   # header bold 14pt
  column_spec(1, extra_css = "font-size:12pt; font-weight:bold;") %>% 
  column_spec(2, extra_css = "font-size:12pt;")

```

### Predictor Variables

```{r}
features <- data.frame(
  No      = 1:21,
  Feature = c(
    "Status of existing checking account",
    "Duration in months",
    "Credit history",
    "Purpose of the loan",
    "Credit amount",
    "Savings account / bonds",
    "Present employment duration",
    "Installment rate (% of disposable income)",
    "Personal status and sex",
    "Other debtors / guarantors",
    "Present residence duration",
    "Property ownership",
    "Age in years",
    "Other installment plans",
    "Housing type",
    "Number of existing credits at this bank",
    "Job category (ordered)",
    "Number of dependents",
    "Telephone availability (yes/no)",
    "Foreign worker status (yes/no)",
    "CreditRisk (target: Good vs. Bad)"
  ),
  check.names     = FALSE,
  stringsAsFactors= FALSE
)
features %>%
  kable(format = "html", escape = FALSE, align = c("c","l")) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped","hover","condensed")) %>%
  row_spec(0, extra_css = "font-size:14pt; font-weight:bold;") %>%   # header bold 14pt
  column_spec(1, extra_css = "font-size:12pt; font-weight:bold;") %>% 
  column_spec(2, extra_css = "font-size:12pt;")

```
